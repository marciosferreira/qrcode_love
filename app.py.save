import pymysql
import os
import qrcode
import stripe
import boto3
import time
from flask import Flask, render_template, request, redirect, url_for, jsonify
from flask_sqlalchemy import SQLAlchemy
import mercadopago
from datetime import datetime, timedelta
from PIL import Image, ImageDraw, ImageFont

# Configurações iniciais
app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'mysql+pymysql://admin:cpfl2002@database-1.cluster-c78coese2dbv.us-east-1.rds.amazonaws.com:3306/meu_novo_banco'
db = SQLAlchemy(app)

# Parâmetros de conexão (sem o nome do banco de dados ainda)
writer_endpoint = "database-1.cluster-c78coese2dbv.us-east-1.rds.amazonaws.com"  # Endpoint de gravação
reader_endpoint = "database-1.cluster-ro-c78coese2dbv.us-east-1.rds.amazonaws.com"  # Endpoint de leitura
username = "admin"
password = "cpfl2002"
port = 3306

# Conectar ao Aurora sem especificar um banco de dados e criar um banco de dados
connection = pymysql.connect(
    host=writer_endpoint,
    user=username,
    password=password,
    port=port
)

try:
    with connection.cursor() as cursor:
        cursor.execute("CREATE DATABASE IF NOT EXISTS meu_novo_banco")
        print("Banco de dados 'meu_novo_banco' criado ou já existente.")
finally:
    connection.close()

# Configure o SDK do Mercado Pago
mp = mercadopago.SDK("APP_USR-7788212792459286-100515-877d8d26d1cb62eb816d39854668fa8b-2022910974")

class Couple(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name1 = db.Column(db.String(50), nullable=False)
    name2 = db.Column(db.String(50), nullable=False)
    event_date = db.Column(db.Date, nullable=False)
    event_description = db.Column(db.String(255), nullable=False)  # Descrição do evento
    paid = db.Column(db.Boolean, default=False)
    page_url = db.Column(db.String(50), unique=True, nullable=False)  # Garante unicidade para page_url
    optional_message = db.Column(db.String(500))  # Mensagem opcional
    email = db.Column(db.String(50))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)  # Data de criação da página


@app.route('/delete_old_pages', methods=['GET', 'POST'])
def delete_old_pages():
    try:
        # Calcula a data de 90 dias atrás
        ninety_days_ago = datetime.utcnow() - timedelta(days=90)

        # Encontra todas as páginas criadas há mais de 90 dias
        old_pages = Couple.query.filter(Couple.created_at < ninety_days_ago).all()

        for page in old_pages:
            db.session.delete(page)

        db.session.commit()

        return "Páginas com mais de 90 dias foram deletadas com sucesso!", 200
    except Exception as e:
        db.session.rollback()
        return f"Erro ao deletar páginas antigas: {e}", 500




@app.route('/deletar', methods=['GET', 'POST'])
def deletar_pagina():
    if request.method == 'GET':
        # Renderizar o formulário de deleção
        return render_template('deletar.html')

    elif request.method == 'POST':
        email = request.form['email']
        code = request.form['code']

        # Procurar o casal no banco de dados pelo email e código da página
        couple = Couple.query.filter_by(email=email, page_url=code).first()

        if couple:
            try:
                db.session.delete(couple)
                db.session.commit()
                return "Página deletada com sucesso!"
            except Exception as e:
                db.session.rollback()
                return f"Erro ao deletar a página: {e}", 500
        else:
            return "Página não encontrada. Verifique o email e o código informados.", 404






# Garantir que as tabelas serão criadas
with app.app_context():
    #db.drop_all()    # isso deleta todo o banco de dados
    db.create_all()

import random
import string

import boto3  # Usando Amazon SES para enviar e-mails

# Função para enviar e-mail
def send_email(to_address, subject, body):
    client = boto3.client('ses', region_name='us-east-1')  # Substitua pela sua região
    response = client.send_email(
        Source='contato@qrcodelove.me',  # Substitua pelo seu e-mail
        Destination={
            'ToAddresses': [to_address],
        },
        Message={
            'Subject': {
                'Data': subject,
            },
            'Body': {
                'Html': {
                    'Data': body,
                },
            },
        }
    )
    return response

@app.route('/create', methods=['POST'])
def create_couple_page():
    try:
        # Capturando os valores do formulário
        name1 = request.form['name1']
        name2 = request.form['name2']
        event_date = request.form['event_date']
        email = request.form['email']
        event_description = request.form['event_description']
        optional_message = request.form.get('optional_message')  # Captura a mensagem opcional

        # Gera um código alfanumérico único para a URL da página
        unique_code = generate_unique_code()
        while Couple.query.filter_by(page_url=unique_code).first() is not None:
            unique_code = generate_unique_code()

        # Cria o casal e salva no banco de dados
        new_couple = Couple(
            name1=name1,
            name2=name2,
            event_date=event_date,
            event_description=event_description,
            page_url=unique_code,
            optional_message=optional_message,  # Salva a mensagem opcional
            email=email
        )
        db.session.add(new_couple)
        db.session.commit()

        # Gera o link para a página recém-criada
        url = url_for('couple_page', page_url=new_couple.page_url, _external=True)

        # Gerar QR Code e salvar (certifique-se que couple_id seja convertido)
        generate_qr_code(url, unique_code)

        # Corpo do e-mail
        email_subject = "Sua página foi criada!"
        email_body = f"""
        Olá {name1} e {name2},<br><br>
        Sua página foi criada com sucesso! Acesse-a aqui: <a href='{url}'>{url}</a>.<br><br>
        Se quiser deletar sua página, acesse o link abaixo e insira seu email e o código da página: {unique_code}<br>
        <a href='http://qrcodelove.me/deletar'>http://qrcodelove.me/deletar</a> <br>
        Ou ela será deletada automaticamente em 90 dias.<br><br>
        Atenciosamente,<br>
        Equipe de Suporte
        """

        # Enviar e-mail (opcional)
        send_email(email, email_subject, email_body)

        # Redirecionar diretamente para a página do casal
        return redirect(url_for('couple_page', page_url=new_couple.page_url))

    except Exception as e:
        print(f"Erro ao criar a página do casal: {e}")
        return f"Erro ao criar a página do casal: {e}", 400


# Função para gerar um código único de letras e números
def generate_unique_code(length=8):
    characters = string.ascii_letters + string.digits  # Letras e números
    return ''.join(random.choice(characters) for _ in range(length))

# Rota para página inicial
@app.route('/')
def index():
    return render_template('index.html')



@app.route('/couple_page/<string:page_url>')
def couple_page(page_url):
    couple = Couple.query.filter_by(page_url=page_url).first()

    if not couple:
        # Retorna uma página personalizada informando que a página não existe
        return render_template('not_found.html'), 404

    # Calcula o tempo desde o evento
    event_datetime = datetime.combine(couple.event_date, datetime.min.time())
    now = datetime.now()
    time_diff = now - event_datetime
    years = time_diff.days // 365
    months = (time_diff.days % 365) // 30
    days = (time_diff.days % 365) % 30
    hours, remainder = divmod(time_diff.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)

    # Verifica se o pagamento foi realizado
    qr_code_path = f'static/qrcodes/{couple.id}.png'
    if couple.paid:
        return render_template('couple_page.html', couple=couple, payment_pending=False, years=years, months=months, days=days, hours=hours, minutes=minutes, seconds=seconds, qr_code_path=qr_code_path)
    else:
        return render_template('couple_page.html', couple=couple, payment_pending=True, years=years, months=months, days=days, hours=hours, minutes=minutes, seconds=seconds, qr_code_path=qr_code_path)






# Rota de pagamento (Mercado Pago)
@app.route('/pay/<int:id>', methods=['POST'])
def pay(id):
    couple = Couple.query.get_or_404(id)

    # Capturar o email do casal
    email = couple.email


    # Criar a preferência de pagamento
    preference_data = {
        "items": [
            {
                "title": "Página contador sem anúncios (90 dias)",
                "quantity": 1,
                "currency_id": "BRL",  # Moeda BRL para real brasileiro
                "unit_price": 10.00  # Valor do pagamento
            }
        ],
        "payer": {
            "email": email
        },
        "back_urls": {
            "success": url_for('payment_success', page_url=couple.page_url, _external=True),  # Usar page_url
            "failure": url_for('couple_page', page_url=couple.page_url, _external=True),      # Usar page_url
            "pending": url_for('couple_page', page_url=couple.page_url, _external=True)       # Usar page_url
        },
        "auto_return": "approved",
        "notification_url": "http://qrcodelove.me/webhook",  # Webhook para fallback
        "metadata": {
            "couple_id": couple.id  # Incluindo o ID do casal como metadado
        }
    }

    try:
        # Criar preferência de pagamento
        preference_response = mp.preference().create(preference_data)

        # Verifica se a resposta contém a chave esperada
        if "response" in preference_response and "id" in preference_response["response"]:
            preference_id = preference_response["response"]["id"]

            # Redirecionar o cliente para o Mercado Pago Checkout
            return redirect(preference_response["response"]["init_point"], code=303)
        else:
            return "Erro ao criar preferência de pagamento", 400

    except Exception as e:
        print(f"Erro na criação de preferência de pagamento: {e}")
        return "Erro ao processar o pagamento", 500

# Rota de sucesso do pagamento (Verificação ativa)
@app.route('/payment_success/<string:page_url>')
def payment_success(page_url):
    couple = Couple.query.filter_by(page_url=page_url).first_or_404()

    # Verifica o status do pagamento diretamente na API do Mercado Pago
    payment_id = request.args.get('payment_id')
    payment_info = mp.payment().get(payment_id)

    # Se o status for aprovado, marque o casal como pago
    if payment_info['response']['status'] == 'approved':
        couple.paid = True
        db.session.commit()

    return redirect(url_for('couple_page', page_url=couple.page_url))

@app.route('/webhook', methods=['POST'])
def webhook():
    notification_data = request.json

    if notification_data.get('type') == 'payment':
        payment_id = notification_data.get('data', {}).get('id')
        payment_info = mp.payment().get(payment_id)

        if payment_info['response']['status'] == 'approved':
            couple_id = payment_info['response']['metadata']['couple_id']
            couple = Couple.query.get_or_404(couple_id)
            couple.paid = True
            couple.created_at = datetime.utcnow()  # Atualiza a data de criação para a data atual
            db.session.commit()

    return jsonify({"status": "success"}), 200

# Função para gerar QR code com a URL da página no rodapé
def generate_qr_code(url, unique_code):
    # Gerar o QR code
    img = qrcode.make(url)

    # Configurar a fonte para adicionar o texto (necessário ter uma fonte TTF disponível)
    try:
        font = ImageFont.truetype("arial.ttf", 16)  # Substitua pelo caminho da fonte TTF se necessário
    except IOError:
        font = ImageFonnt.load_default()

    # Criar uma nova imagem maior para incluir o texto
    img_width, img_height = img.size
    new_height = img_height + 30
    new_img = Image.new("RGB", (img_width, new_height), "white")
    new_img.paste(img, (0, 0))

    # Desenhar o texto na nova imagem
    draw = ImageDraw.Draw(new_img)
    text = url  # Atualizado para usar a URL da página
    text_width, text_height = draw.textbbox((0, 0), text, font=font)[2:4]
    text_x = (img_width - text_width) / 2
    text_y = img_height + 5
    draw.text((text_x, text_y), text, fill="black", font=font)
    os.makedirs('static/qrcodes', exist_ok=True)

    # Salvar a imagem com o QR code e o texto
    new_img.save(f'static/qrcodes/{unique_code}.png')


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8000)
